import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import os
from flask import Flask, request
import time
import json

# --- Configuration ---
# Load environment variables. These must be set in your Vercel project settings.
TOKEN = os.environ.get('TELEGRAM_TOKEN')
WEBHOOK_SECRET = os.environ.get('WEBHOOK_SECRET')
PUBLIC_URL = os.environ.get('PUBLIC_URL')

# A fatal error will occur on Vercel if these are not set.
if not TOKEN or not WEBHOOK_SECRET or not PUBLIC_URL:
    raise ValueError("FATAL ERROR: TELEGRAM_TOKEN, WEBHOOK_SECRET, and PUBLIC_URL environment variables must be set.")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)


# --- Bot Logic (Menus and Handlers from your original file) ---

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = InlineKeyboardMarkup(row_width=2)
    video_button = InlineKeyboardButton("üìπ –í–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data='video_menu')
    contacts_button = InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts_menu')
    request_button = InlineKeyboardButton("‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='make_request')
    reviews_button = InlineKeyboardButton("üí¨ –û—Ç–∑—ã–≤—ã", callback_data='reviews_menu')
    faq_button = InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data='faq_menu')
    price_button = InlineKeyboardButton("üí∞ –ü—Ä–∞–π—Å", callback_data='show_price')
    reserve_button = InlineKeyboardButton("üîí –†–µ–∑–µ—Ä–≤", callback_data='reserve')
    markup.add(video_button)
    markup.add(contacts_button, request_button)
    markup.add(reviews_button, faq_button)
    markup.add(price_button, reserve_button)
    return markup

# –ú–µ–Ω—é –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
def video_menu():
    markup = InlineKeyboardMarkup(row_width=1)
    for i in range(1, 6):
        markup.add(InlineKeyboardButton(f"–°—Å—ã–ª–∫–∞ {i}", callback_data=f'video_link_{i}'))
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main'))
    return markup

# –ú–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
def contacts_menu():
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton("üìç –ù–∞—à –∞–¥—Ä–µ—Å", callback_data='contact_address'))
    markup.add(InlineKeyboardButton("üìß Email", callback_data='contact_email'))
    markup.add(InlineKeyboardButton("üì± –¢–µ–ª–µ—Ñ–æ–Ω", callback_data='contact_phone'))
    markup.add(InlineKeyboardButton("üí¨ Telegram", callback_data='contact_telegram'))
    markup.add(InlineKeyboardButton("üåê –°–∞–π—Ç", callback_data='contact_website'))
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main'))
    return markup

# –ú–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤
def reviews_menu():
    markup = InlineKeyboardMarkup(row_width=1)
    for i in range(1, 6):
        markup.add(InlineKeyboardButton(f"–û—Ç–∑—ã–≤ {i}", callback_data=f'review_link_{i}'))
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main'))
    return markup

# –ú–µ–Ω—é —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
def faq_menu():
    markup = InlineKeyboardMarkup(row_width=1)
    questions = ["–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?", "–ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã?", "–°–∫–æ–ª—å–∫–æ –∏–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?", "–ö–∞–∫ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä?", "–ï—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫–∏?"]
    for i, question in enumerate(questions, 1):
        markup.add(InlineKeyboardButton(f"–í–æ–ø—Ä–æ—Å {i}: {question}", callback_data=f'faq_question_{i}'))
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main'))
    return markup

# –ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã
def payment_menu():
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(InlineKeyboardButton("üí≥ –°–ë–ü (–ø–æ –Ω–æ–º–µ—Ä—É)", callback_data='payment_sbp'), InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data='payment_card'))
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main'))
    return markup

# –ú–µ–Ω—é –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–Ω–∞–∑–∞–¥"
def price_menu():
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main_from_price'))
    return markup

# –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
@bot.message_handler(func=lambda message: True)
def debug_all_messages(message):
    print(f"[DEBUG] Received message: Chat ID={message.chat.id}, Type={message.content_type}, Text={message.text}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    print(f"[Handler] Received /start command from chat ID: {message.chat.id}")
    try:
        bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu())
        print(f"[Handler] Sent welcome message to chat ID: {message.chat.id}")
    except Exception as e:
        print(f"[Handler] Error sending welcome message to chat ID {message.chat.id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if call.data == 'video_menu':
            bot.answer_callback_query(call.id)
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            time.sleep(0.1)
            
            bot.send_message(
                call.message.chat.id,
                "üìπ –í–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã:",
                reply_markup=video_menu()
            )
        
        # –ö–æ–Ω—Ç–∞–∫—Ç—ã
        elif call.data == 'contacts_menu':
            bot.answer_callback_query(call.id)
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            time.sleep(0.1)
            
            bot.send_message(
                call.message.chat.id,
                "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:",
                reply_markup=contacts_menu()
            )
        
        # –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
        elif call.data == 'make_request':
            bot.answer_callback_query(call.id)
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            time.sleep(0.1)
            
            bot.send_message(
                call.message.chat.id,
                "‚úçÔ∏è –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                reply_markup=payment_menu()
            )
        
        # –û—Ç–∑—ã–≤—ã
        elif call.data == 'reviews_menu':
            bot.answer_callback_query(call.id)
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            time.sleep(0.1)
            
            bot.send_message(
                call.message.chat.id,
                "üí¨ –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:",
                reply_markup=reviews_menu()
            )
        
        # –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        elif call.data == 'faq_menu':
            bot.answer_callback_query(call.id)
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            time.sleep(0.1)
            
            bot.send_message(
                call.message.chat.id,
                "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:",
                reply_markup=faq_menu()
            )
        
        # –ü—Ä–∞–π—Å
        elif call.data == 'show_price':
            bot.answer_callback_query(call.id)
            print("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç...")

            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
                print("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–æ")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            time.sleep(0.2)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_path = os.path.join(os.path.dirname(__file__), 'price.xlsx')
            if os.path.exists(file_path):
                print("–§–∞–π–ª price.xlsx –Ω–∞–π–¥–µ–Ω")
                try:
                    with open(file_path, 'rb') as price_file:
                        bot.send_document(
                            call.message.chat.id,
                            price_file,
                            caption="üí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
                            reply_markup=price_menu()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥"
                        )
                    print("–ü—Ä–∞–π—Å-–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
                    bot.send_message(
                        call.message.chat.id,
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=main_menu()
                    )
            else:
                print("–§–∞–π–ª price.xlsx –ù–ï –Ω–∞–π–¥–µ–Ω!")
                bot.send_message(
                    call.message.chat.id,
                    "‚ùå –§–∞–π–ª –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=main_menu()
                )
        
        # –†–µ–∑–µ—Ä–≤
        elif call.data == 'reserve':
            bot.answer_callback_query(call.id)
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            time.sleep(0.1)
            
            bot.send_message(
                call.message.chat.id,
                "üîí –§—É–Ω–∫—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º!",
                reply_markup=main_menu()
            )
        
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        elif call.data == 'back_to_main':
            bot.answer_callback_query(call.id)
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            time.sleep(0.1)
            
            bot.send_message(
                call.message.chat.id,
                "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=main_menu()
            )
        
        # –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
        elif call.data == 'back_to_main_from_price':
            bot.answer_callback_query(call.id)
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
                print("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–π—Å–æ–º —É–¥–∞–ª–µ–Ω–æ")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–π—Å–æ–º: {e}")
                bot.send_message(
                    call.message.chat.id,
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    reply_markup=main_menu()
                )
                return
            
            time.sleep(0.1)
            
            bot.send_message(
                call.message.chat.id,
                "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=main_menu()
            )
        
        # –°—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ
        elif call.data.startswith('video_link_'):
            link_num = call.data.split('_')[-1]
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id, f"üìπ –í–æ—Ç —Å—Å—ã–ª–∫–∞ {link_num}: [–ü–µ—Ä–µ–π—Ç–∏](https://example.com/video{link_num})", parse_mode='Markdown')
        
        # –°—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç–∑—ã–≤—ã
        elif call.data.startswith('review_link_'):
            link_num = call.data.split('_')[-1]
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id, f"üí¨ –í–æ—Ç –æ—Ç–∑—ã–≤ {link_num}: [–ß–∏—Ç–∞—Ç—å](https://example.com/review{link_num})", parse_mode='Markdown')
        
        # –í–æ–ø—Ä–æ—Å—ã FAQ
        elif call.data.startswith('faq_question_'):
            q_num = call.data.split('_')[-1]
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id, f"‚ùì –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {q_num}: –û—Ç–≤–µ—Ç")
        
        # –ö–æ–Ω—Ç–∞–∫—Ç—ã
        elif call.data.startswith('contact_'):
            contact_type = call.data.split('_')[-1]
            contact_info = {
                'address': 'üìç –ù–∞—à –∞–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1, –æ—Ñ–∏—Å 123',
                'email': 'üìß Email: info@yourcompany.com',
                'phone': 'üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 905 479-89-46',
                'telegram': 'üí¨ Telegram: @yourcompany',
                'website': 'üåê –°–∞–π—Ç: https://yourcompany.com'
            }
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id, contact_info.get(contact_type, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"))
        
        # –û–ø–ª–∞—Ç–∞ –°–ë–ü
        elif call.data == 'payment_sbp':
            bot.answer_callback_query(call.id)
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            time.sleep(0.1)
            
            bot.send_message(
                call.message.chat.id,
                "üí≥ *–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–∏—Å—Ç–µ–º—É –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π (–°–ë–ü)*\n\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:\n"
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞\n"
                "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ü–ª–∞—Ç–µ–∂–∏¬ª ‚Üí ¬´–°–ë–ü¬ª\n"
                "3. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `+7 905 479-89-46`\n"
                "4. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–π—Å—É\n"
                "5. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ: `–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è Telegram`\n\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                parse_mode='Markdown',
                reply_markup=main_menu()
            )
        
        # –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
        elif call.data == 'payment_card':
            bot.answer_callback_query(call.id)
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            time.sleep(0.1)
            
            bot.send_message(
                call.message.chat.id,
                "üí≥ *–û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π*\n\n"
                "–î–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:\n"
                "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: [–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π](https://example.com/payment)\n"
                "2. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–π—Å—É\n"
                "3. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ: `–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è Telegram`\n\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                parse_mode='Markdown',
                reply_markup=main_menu()
            )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback: {e}")
        bot.answer_callback_query(call.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


# --- Main Webhook Handler (from Template) ---
@app.route('/', methods=['GET', 'POST'])
def webhook_and_index():
    print("--- Request received by webhook_and_index ---")
    # --- Automatic Webhook Setup on Request (Attempt 4) ---
    # This ensures the webhook is always set to the correct URL, even after cold starts.
    try:
        target_url = f"https://{PUBLIC_URL}/"
        print(f"[Webhook Setup in Handler] Checking webhook status for: {target_url}")
        current_webhook_info = bot.get_webhook_info()

        if not current_webhook_info or current_webhook_info.url != target_url:
            print("[Webhook Setup in Handler] Webhook not set or incorrect. Attempting to set...")
            print("[Webhook Setup in Handler] Removing any existing webhook...")
            bot.remove_webhook()
            time.sleep(0.5) # Give Telegram a moment to process

            print(f"[Webhook Setup in Handler] Setting new webhook to {target_url} with secret token...")
            bot.set_webhook(url=target_url, secret_token=WEBHOOK_SECRET)
            print("[Webhook Setup in Handler] Webhook set command sent to Telegram.")

            # Verify if the webhook was set correctly (optional, but good for debugging)
            current_webhook_info_after_set = bot.get_webhook_info()
            if current_webhook_info_after_set and current_webhook_info_after_set.url == target_url:
                print(f"[Webhook Setup in Handler] Webhook successfully verified to be set to {target_url}")
            else:
                print(f"[Webhook Setup in Handler] Webhook verification failed. Current URL: {current_webhook_info_after_set.url if current_webhook_info_after_set else 'None'}")
        else:
            print(f"[Webhook Setup in Handler] Webhook already correctly set to: {current_webhook_info.url}")
    except Exception as e:
        print(f"[Webhook Setup in Handler] Error during automatic webhook setup: {e}")

    if request.method == 'GET':
        return "Bot is running!", 200
    if request.method == 'POST':
        secret_header = request.headers.get('X-Telegram-Bot-Api-Secret-Token')
        if secret_header != WEBHOOK_SECRET:
            return "Unauthorized", 401
        try:
            raw_data = request.stream.read().decode('utf-8')
            update = telebot.types.Update.de_json(raw_data)
            print(f"[Webhook Handler] Registered message handlers: {len(bot.message_handlers)}")
            print("Update received, passing to bot processor.")
            # Let the bot's internal router handle all update types
            start_time = time.time()
            bot.process_new_updates([update])
            end_time = time.time()
            print(f"Bot processed update in {end_time - start_time:.4f} seconds.")
        except Exception as e:
            print(f"An error occurred in webhook handler: {e}")
        return 'OK', 200

# --- Setup Endpoint (Safe Version) ---
@app.route('/set_webhook')
def set_webhook_manual():
    try:
        target_url = f"https://{PUBLIC_URL}/"
        print(f"Attempting to set webhook to: {target_url}")

        # Always remove the webhook first to ensure a clean slate
        print("Removing any existing webhook...")
        bot.remove_webhook()
        time.sleep(0.5) # Give Telegram a moment to process

        print(f"Setting new webhook to {target_url} with secret token...")
        bot.set_webhook(url=target_url, secret_token=WEBHOOK_SECRET)
        print("Webhook set command sent to Telegram.")

        # Verify if the webhook was set correctly (optional, but good for debugging)
        current_webhook_info = bot.get_webhook_info()
        if current_webhook_info and current_webhook_info.url == target_url:
            print(f"Webhook successfully verified to be set to {target_url}")
            return f"Webhook successfully set and verified to {target_url}", 200
        else:
            print(f"Webhook verification failed. Current URL: {current_webhook_info.url if current_webhook_info else 'None'}")
            return f"Webhook set, but verification failed. Current URL: {current_webhook_info.url if current_webhook_info else 'None'}", 500

    except Exception as e:
        print(f"Error in set_webhook: {e}")
        return f"An error occurred: {e}", 500


