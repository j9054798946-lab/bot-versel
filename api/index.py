import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import os
from flask import Flask, request
import time
import json

# --- Configuration ---
# Load environment variables. These must be set in your Vercel project settings.
TOKEN = os.environ.get('TELEGRAM_TOKEN')
WEBHOOK_SECRET = os.environ.get('WEBHOOK_SECRET')
PUBLIC_URL = os.environ.get('PUBLIC_URL')

# A fatal error will occur on Vercel if these are not set.
if not TOKEN or not WEBHOOK_SECRET or not PUBLIC_URL:
    raise ValueError("FATAL ERROR: TELEGRAM_TOKEN, WEBHOOK_SECRET, and PUBLIC_URL environment variables must be set.")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)


# --- Bot Logic (Menus and Handlers from your original file) ---

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = InlineKeyboardMarkup(row_width=2)
    video_button = InlineKeyboardButton("üìπ –í–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data='video_menu')
    contacts_button = InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts_menu')
    request_button = InlineKeyboardButton("‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='make_request')
    reviews_button = InlineKeyboardButton("üí¨ –û—Ç–∑—ã–≤—ã", callback_data='reviews_menu')
    faq_button = InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data='faq_menu')
    price_button = InlineKeyboardButton("üí∞ –ü—Ä–∞–π—Å", callback_data='show_price')
    reserve_button = InlineKeyboardButton("üîí –†–µ–∑–µ—Ä–≤", callback_data='reserve')
    markup.add(video_button)
    markup.add(contacts_button, request_button)
    markup.add(reviews_button, faq_button)
    markup.add(price_button, reserve_button)
    return markup

# –ú–µ–Ω—é –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
def video_menu():
    markup = InlineKeyboardMarkup(row_width=1)
    for i in range(1, 6):
        markup.add(InlineKeyboardButton(f"–°—Å—ã–ª–∫–∞ {i}", callback_data=f'video_link_{i}'))
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main'))
    return markup

# –ú–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
def contacts_menu():
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton("üìç –ù–∞—à –∞–¥—Ä–µ—Å", callback_data='contact_address'))
    markup.add(InlineKeyboardButton("üìß Email", callback_data='contact_email'))
    markup.add(InlineKeyboardButton("üì± –¢–µ–ª–µ—Ñ–æ–Ω", callback_data='contact_phone'))
    markup.add(InlineKeyboardButton("üí¨ Telegram", callback_data='contact_telegram'))
    markup.add(InlineKeyboardButton("üåê –°–∞–π—Ç", callback_data='contact_website'))
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main'))
    return markup

# –ú–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤
def reviews_menu():
    markup = InlineKeyboardMarkup(row_width=1)
    for i in range(1, 6):
        markup.add(InlineKeyboardButton(f"–û—Ç–∑—ã–≤ {i}", callback_data=f'review_link_{i}'))
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main'))
    return markup

# –ú–µ–Ω—é —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
def faq_menu():
    markup = InlineKeyboardMarkup(row_width=1)
    questions = ["–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?", "–ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã?", "–°–∫–æ–ª—å–∫–æ –∏–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?", "–ö–∞–∫ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä?", "–ï—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫–∏?"]
    for i, question in enumerate(questions, 1):
        markup.add(InlineKeyboardButton(f"–í–æ–ø—Ä–æ—Å {i}: {question}", callback_data=f'faq_question_{i}'))
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main'))
    return markup

# –ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã
def payment_menu():
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(InlineKeyboardButton("üí≥ –°–ë–ü (–ø–æ –Ω–æ–º–µ—Ä—É)", callback_data='payment_sbp'), InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data='payment_card'))
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main'))
    return markup

# –ú–µ–Ω—é –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–Ω–∞–∑–∞–¥"
def price_menu():
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main_from_price'))
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        if call.data == 'video_menu':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üìπ –í–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã:", reply_markup=video_menu())
        elif call.data == 'contacts_menu':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:", reply_markup=contacts_menu())
        elif call.data == 'make_request':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="‚úçÔ∏è –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_menu())
        elif call.data == 'reviews_menu':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üí¨ –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:", reply_markup=reviews_menu())
        elif call.data == 'faq_menu':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=faq_menu())
        elif call.data == 'show_price':
            bot.answer_callback_query(call.id)
            bot.delete_message(call.message.chat.id, call.message.message_id)
            # NOTE: File sending from a serverless function can be tricky.
            # The file 'price.xlsx' must be in the same directory as this index.py file.
            file_path = os.path.join(os.path.dirname(__file__), 'price.xlsx')
            if os.path.exists(file_path):
                with open(file_path, 'rb') as price_file:
                    bot.send_document(call.message.chat.id, price_file, caption="üí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", reply_markup=price_menu())
            else:
                bot.send_message(call.message.chat.id, "‚ùå –§–∞–π–ª –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, ÔøΩÔøΩ–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=main_menu())
        elif call.data == 'reserve':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üîí –§—É–Ω–∫—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º!", reply_markup=main_menu())
        elif call.data == 'back_to_main':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        elif call.data == 'back_to_main_from_price':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        elif call.data.startswith('video_link_'):
            link_num = call.data.split('_')[-1]
            bot.answer_callback_query(call.id, f"–í–∏–¥–µ–æ {link_num}")
        elif call.data.startswith('review_link_'):
            link_num = call.data.split('_')[-1]
            bot.answer_callback_query(call.id, f"–û—Ç–∑—ã–≤ {link_num}")
        elif call.data.startswith('faq_question_'):
            q_num = call.data.split('_')[-1]
            bot.answer_callback_query(call.id, f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {q_num}")
        elif call.data.startswith('contact_'):
            contact_type = call.data.split('_')[-1]
            contact_info = {'address': 'üìç –ù–∞—à –∞–¥—Ä–µ—Å: ...', 'email': 'üìß Email: ...', 'phone': 'üì± –¢–µ–ª–µ—Ñ–æ–Ω: ...', 'telegram': 'üí¨ Telegram: ...', 'website': 'üåê –°–∞–π—Ç: ...'}
            bot.answer_callback_query(call.id, contact_info.get(contact_type, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"))
        elif call.data == 'payment_sbp':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üí≥ *–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü* ...", parse_mode='Markdown', reply_markup=main_menu())
        elif call.data == 'payment_card':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üí≥ *–û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π* ...", parse_mode='Markdown', reply_markup=main_menu())
    except Exception as e:
        print(f"Error in callback handler: {e}")


# --- Main Webhook Handler (from Template) ---
@app.route('/', methods=['GET', 'POST'])
def webhook_and_index():
    if request.method == 'GET':
        return "Bot is running!", 200
    if request.method == 'POST':
        secret_header = request.headers.get('X-Telegram-Bot-Api-Secret-Token')
        if secret_header != WEBHOOK_SECRET:
            return "Unauthorized", 401
        try:
            raw_data = request.stream.read().decode('utf-8')
            update = telebot.types.Update.de_json(raw_data)
            print("Update received, passing to bot processor.")
            # Let the bot's internal router handle all update types
            bot.process_new_updates([update])
        except Exception as e:
            print(f"An error occurred in webhook handler: {e}")
        return 'OK', 200

# --- Setup Endpoint (from Template) ---
@app.route('/set_webhook')
def set_webhook():
    url = f"https://{PUBLIC_URL}/"
    bot.remove_webhook()
    bot.set_webhook(url=url, secret_token=WEBHOOK_SECRET)
    return f"Webhook successfully set to {url}"